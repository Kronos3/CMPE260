----------------------------------------------------------------------------------
-- Company: RIT
-- Engineer: Andrei Tumbar
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity multTB is
end multTB;

architecture Behavioral of multTB is

    component mult is
        -- generic(N : INTEGER := 32);
        port (
            a : in std_logic_vector(15 downto 0);
            b : in std_logic_vector(15 downto 0);
            
            p : out std_logic_vector(31 downto 0)
        );
    end component mult;

    type test_vector is record
        a, b  : std_logic_vector(15 downto 0);
        p     : std_logic_vector(31 downto 0);
    end record;

    type test_array is array (natural range <>) of test_vector;
    constant test_vector_array : test_array := (
        (a => x"0010",
         b => x"0002",
         p => x"00000020"
        ),
        (a => x"0010",
         b => x"0004",
         p => x"00000040"
        ),
        (a => x"0040",
         b => x"0004",
         p => x"00000100"
        ),
        (a => x"abcd",
         b => x"ef12",
         p => x"a070776a"
        ),
        (a => x"abcd",
         b => x"ffff",
         p => x"abcc5433"
        )
    );

    signal a, b: std_logic_vector(15 downto 0);
    signal p: std_logic_vector(31 downto 0);

begin

    test_mult: mult
        -- generic map(N => 32)
        port map (
            a => a,
            b => b,
            p => p
        );

    test_exec: process is
    begin
    for i in test_vector_array'range loop
        a <= test_vector_array(i).a;
        b <= test_vector_array(i).b;
        
        wait for 100ns;
        assert p = test_vector_array(i).p
            report "Incorrect product output"
            severity failure;
    end loop;
    
    assert false
        report "Testbench Concluded"
        severity failure;
    end process;
end Behavioral;
