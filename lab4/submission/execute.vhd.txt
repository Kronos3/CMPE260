----------------------------------------------------------------------------------
-- Company: RIT
-- Engineer: Andrei Tumbar
-- Execute Stage
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ExecuteStage is
  Port (
  
    RegWrite : in std_logic;
    MemToReg : in std_logic;
    MemWrite : in std_logic;
    ALUControl : in std_logic_vector(3 downto 0);
    ALUSrc   : in std_logic;
    RegDst   : in std_logic;
    RegSrcA  : in std_logic_vector(31 downto 0);
    RegSrcB  : in std_logic_vector(31 downto 0);
    RtDest   : in std_logic_vector(4 downto 0);
    RdDest   : in std_logic_vector(4 downto 0);
    SignImm  : in std_logic_vector(31 downto 0);
    
    RegWriteOut : out std_logic;
    MemToRegOut : out std_logic;
    MemWriteOut : out std_logic;
    ALUResult   : out std_logic_vector(31 downto 0);
    WriteData   : out std_logic_vector(31 downto 0);
    WriteReg    : out std_logic_vector(4 downto 0)
  
  );
end ExecuteStage;
architecture Behavioral of ExecuteStage is
    component alu4 is
    GENERIC ( N : INTEGER := 4) ; --bit width
    PORT (
        A : IN std_logic_vector(N -1 downto 0);
        B : IN std_logic_vector(N -1 downto 0);
        OP : IN std_logic_vector(3 downto 0);
        Y : OUT std_logic_vector (N -1 downto 0)
    ) ;
    end component;

    signal alu_src_b : std_logic_vector(31 downto 0);
begin
    -- Passthrough bits
    RegWriteOut <= RegWrite;
    MemToRegOut <= MemToReg;
    MemWriteOut <= MemWrite;

    alu_src_b <=
        RegSrcB when ALUSrc = '0'
        else SignImm;
    
    WriteReg <= RtDest when RegDst = '0'
            else RdDest;
    
    WriteData <= RegSrcB;
    
    alu: alu4
        generic map(N => 32)
        port map (A => RegSrcA,
                  B => alu_src_b,
                  OP => ALUControl,
                  Y => ALUResult);
    
end Behavioral;
